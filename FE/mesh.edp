/* 
load "medit"
load "msh3" */

int upper = 1;
int others = 2;
int inner = 3;

// border C01(t=0, 1){x=0; y=-1+t; label=upper;}
// border C02(t=0, 1){x=1.5-1.5*t; y=-1; label=upper;}
// border C03(t=0, 1){x=1.5; y=-t; label=upper;}
// border C04(t=0, 1){x=1+0.5*t; y=0; label=others;}
// border C05(t=0, 1){x=0.5+0.5*t; y=0; label=others;}
// border C06(t=0, 1){x=0.5*t; y=0; label=others;}
// border C11(t=0, 1){x=0.5; y=-0.5*t; label=inner;}
// border C12(t=0, 1){x=0.5+0.5*t; y=-0.5; label=inner;}
// border C13(t=0, 1){x=1; y=-0.5+0.5*t; label=inner;}
//
// int n = 5;
// // plot(C01(-n) + C02(-n) + C03(-n) + C04(-n) + C05(-n)
// //  + C06(-n) + C11(n) + C12(n) + C13(n), wait=true);
//
// mesh Th = buildmesh(C01(-n) + C02(-n) + C03(-n) + C04(-n) + C05(-n)
//   + C06(-n) + C11(n) + C12(n) + C13(n));

// plot(Th, wait=true);

// cout << "Part 1 has region number " << Th(0.75, -0.25).region << endl;
// cout << "Part 2 has redion number " << Th(0.25, -0.25).region << endl;

// border a(t=0, 2*pi){x=cos(t); y=sin(t); label=1;}
// mesh circles = buildmesh(a(10));
// plot (circles);


border qo(t=0, 2*pi){x=-1+cos(t); y=sin(t); label=23;}
border boo(t=0, 2*pi){x=cos(t); y=-4+sin(t); label=5;}
border c(t=0, 2*pi){x=3+cos(t); y=1+sin(t); label=8;}

// plot(a(30)+b(20)+c(40));

mesh tha= buildmesh(qo(30)+boo(20)+c(40));

// plot(tha, wait=true);

ifstream file("results.txt");





//-----------------------------------/
//fucking hell freefem is retarded  /
//-----------------------------------/


//skip comments
//use getline to extract apended info-----------------------------------------------------------
int where;
real[int] f = [0, 1, 2, 3, 4, 5];
real[int] g(6);
func ifstream skipcomment(ifstream &ff){
    while(1){
        int where = ff.tellg(); //store file position
        string comment;
        ff >> comment;
        if (!ff.good()) break;
        if (comment(0:0)=="#"){
            getline(ff, comment);
            cout << " -- #" << comment << endl;
        }
        else{
            ff.seekg(where); //restore file position
            break;
        }
    }
    return ff;
}
//--
skipcomment(file);
string s;
getline(file, s);
cout<<s<<endl;
getline(file, s);
cout<<s<<endl;
cout<<"123"<<endl;

//skipped the two comments


//starting
real idx,circlex,circley,radius;

file>>idx>>circlex>>circley>>radius;
cout<<idx<<" "<<circlex<<" "<<circley<<" "<<radius<<endl;


file>>idx>>circlex>>circley>>radius;
cout<<idx<<" "<<circlex<<" "<<circley<<" "<<radius<<endl;


file>>idx>>circlex>>circley>>radius;
cout<<idx<<" "<<circlex<<" "<<circley<<" "<<radius<<endl;


//fucking hell

//gaine et pores

// border test(t=0, 2*pi){x=1000*cos(t); y=1000*sin(t); label=1;};
// mesh test1 = buildmesh(test(10));

int l1=1200;  //height
int l2=2200; //large
int a=70;   // right and left
int b=450; //up and down

/*
int l1=800;
int l2=1600;
int a=200;
int b=-160;
*/
border C01(t=0, 1){x=0-a; y=-b-l1+l1*t; label=upper;}
border C02(t=0, 1){x=l2-l2*t-a; y=-b-l1; label=upper;}
border C03(t=0, 1){x=l2-a; y=-b-l1*t; label=upper;}
border C04(t=0, 1){x=l2*t-a; y=0-b; label=others;}


int n = 25;  //rectangle



// plot(C01(-n) + C02(-n) + C03(-n) + C04(-n) + C05(-n)
//  + C06(-n) + C11(n) + C12(n) + C13(n), wait=true);
//
mesh test1 = buildmesh(C01(-n) + C02(-n) + C03(-n) + C04(-n));

plot(test1, wait=true);


//create holes up in this bitch


/*___________________________________________________ ohhhh! tough luck, what a fucking dumb language
Sometimes it can be useful to make an array of the border, but unfortunately it is incompatible with the FreeFEM syntax. To bypass this problem, if the number of segments of the discretization n is an array, we make an implicit loop on all of the values of the array, and the index variable i of the loop is defined after the parameter definition, like in border a(t=0, 2*pi; i) â€¦
*/ //____________________________________________________________________________________________________________
int nu=150; //150

int l=15; //external maillage number l=20;
int k=5; //internal maillage number k=10;

real[int] arraycirclex(nu);
real[int] arraycircley(nu);
real[int] arrayradius(nu);

int[int] interval(nu) ;
int[int] intervalneg(nu) ;

for (int i=0; i<nu; i++)
{
  interval[i]=-l;
  intervalneg[i]=k;
  real idx,circlex,circley,radius;
  file>>idx>>circlex>>circley>>radius;
  int idxi=atoi(idx);
  real circlexr=-atof(circlex);
  real circleyr=atof(circley);
  real radiusr=atof(radius);
  arraycirclex[i]=circlexr;
  arraycircley[i]=circley;
  arrayradius[i]=radiusr;
}

border cc(t=0, 2*pi; i)
{
    x=-arraycirclex[i]+arrayradius[i]*cos(t);
    y=-arraycircley[i]+arrayradius[i]*sin(t);
    label = i + 1;
}

border ci(t=0, 2*pi; i)
{
    x=-arraycirclex[i]+arrayradius[i]*cos(t);
    y=-arraycircley[i]+arrayradius[i]*sin(t);
    label = i + 1;
}


plot(cc(interval) + C01(-n) + C02(-n) + C03(-n) + C04(-n), wait=true);
mesh demo;
demo = buildmesh(cc(interval)  + C01(-n) + C02(-n) + C03(-n) + C04(-n));
plot(demo, wait=true);
mesh innercircles;
innercircles = buildmesh(cc(interval) + ci(intervalneg) + C01(-n) + C02(-n) + C03(-n) + C04(-n));

plot(innercircles, wait=true);

plot(innercircles, wait=true, bw=false , grey=false , ps="meshtotal.eps");

savemesh(innercircles, "toto.mesh");

//______________________________________________________________________________________________________________

mesh[int] meshs(nu);
int m=10; //maillage number

for (int i=0; i<nu; i++)
{
  real idx,circlex,circley,radius;
  file>>idx>>circlex>>circley>>radius;
  int idxi=atoi(idx);
  real circlexr=-atof(circlex);
  real circleyr=atof(circley);
  real radiusr=atof(radius);
  if (radiusr <=0.0001){continue;}
  //cout<<idx<<" "<<circlex<<" "<<circley<<" "<<radius<<endl;
  else{
  border circle(t=0, 2*pi){x=-circlexr+radiusr*cos(t); y=-circleyr+radiusr*sin(t); label=idxi;}
  border innercircle(t=0, 2*pi){x=-circlexr+radiusr*cos(t); y=-circleyr+radiusr*sin(t); label=idxi;}
  //plot (circle(m));
  meshs[i]= buildmesh(circle(m));
  }

  //innermesh[i]=buildmesh(innercircle(-l));


  //plot(meshs[i](m),  wait=true )
  //plot(meshs[i], wait=true);

}




// for (int i=2; i<nu; i++)
// {
//   test1= test1 +innermesh[i];
// };
// plot(test1, wait=true);

mesh meshtotal= meshs[1];


for (int i=2; i<nu; i++)
{
  meshtotal = meshtotal+ meshs[i];
};

meshtotal = meshtotal + test1;
cout<<"op done"<<endl;


//plot(meshtotal, wait=true);


//savemesh(meshtotal,"Th.msh");

cout<<"----------------------mesh saved---------------------------------"<<endl;




// //gaine et pores
// real x0 = 1.2;
// real x1 = 1.8;
// real y0 = 0;
// real y1 = 1;
//
//
//
// mesh Ths = square(ndim, mdim, [x0+(x1-x0)*x, y0+(y1-y0)*y]);
//
//
// meshtotal=meshtotal+Ths;
// plot(meshtotal, wait=true);

//solving elasticity
// Parameters
real E = 21e5;
real nu1 = 0.28;

real fo = 0;

// Mesh innercircles

// Fespace
fespace Vh(innercircles, P2);
Vh u, v;
Vh uu, vv;

// Macro
real sqrt2=sqrt(2.);
macro epsilon(u1,u2) [dx(u1),dy(u2),(dy(u1)+dx(u2))/sqrt2] //
// The sqrt2 is because we want: epsilon(u1,u2)'* epsilon(v1,v2) = epsilon(u): epsilon(v)
macro div(u,v) ( dx(u)+dy(v) ) //

// Problem
real mu= E/(2*(1+nu1));
real lambda = E*nu1/((1+nu1)*(1-2*nu1));

solve lame([u, v], [uu, vv])
   = int2d(innercircles)(
        lambda * div(u, v) * div(uu, vv)
      + 2.*mu * ( epsilon(u,v)' * epsilon(uu,vv) )
   )
   - int2d(innercircles)(
        fo*vv
   )
   +on(4, u=0.1, v=0.1)
   ;

// Plot
real coef=100;
plot([u, v], wait=true, ps="lamevect.eps", coef=coef);

// Move mesh
mesh th1 = movemesh(innercircles, [x+u*coef, y+v*coef]);
plot(th1,wait=true,ps="lamedeform.eps");

// Output
real dxmin = u[].min;
real dymin = v[].min;

cout << " - dep. max x = "<< dxmin << " y=" << dymin << endl;
cout << "   dep. (20, 0) = " << u(20, 0) << " " << v(20, 0) << endl;
